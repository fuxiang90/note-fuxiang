


===========
昨天简单的跑了一下第一个图的数据，如果说 预测误差在5km/h 就算预测成功的话，那么正确率可以达到80-92%
所使用的算法是梯度下降，使用四个因素。
假设我们要预测t+1 时刻的该道路的速度
1. 当前时刻当前道路的速度
2. 当前时刻上一个道路的速度
3. 历史时刻当前道路t+1 时刻的平均速度
4. 历史时刻上一条道路t+1 时刻的平均速度

现在的问题
===========

### 内存问题
从上面可以看到 生成训练数据 或者 在预测的时候 需要保留 当前时刻的上一个道路的的速度，如果保存
一条路两个月的数据，那么这个量有点大 ，后来我把第二点改成 历史时刻上一条路 t+1 时刻的历史数据

然后 读两次 文件 ，第一次生成 历史数据 第二次生成模型 

这个只是我现在想到的办法 ，那么之前的函数 就可以不用了 


然后还有一个想法 ，每条路都依赖于他的上一条路 ，这样就够成了一个拓扑任务，利用拓扑排序的思想，应该可以 在不读第二次的情况下     
对任务进行调度 ，首先得到一个调度顺序 。
### 梯度下降的算法
这个生成的训练数据 ，用之前的梯度下降的算法 ，误差很大 。最后在python 的模型对比之后 ，ridge 这个线性规划的算法     
可以得到一个很满意的结果。

那么下一步就是如何实现一个这样的算法


下周的任务
=============
测试当前程序的bug ，先改掉一些bug 。
然后 先解决 内存问题 


